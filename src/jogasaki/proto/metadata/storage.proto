syntax = "proto3";

package jogasaki.proto.metadata.storage;

import "jogasaki/proto/metadata/common.proto";

/*
 * Storage Metadata
 */

// -- storages

// the table or index name to identify storage at high level (SQL compiler/engine).
message StorageName {
    // the database name of this storage.
    string database_name = 1;

    // the schema name of this storage.
    string schema_name = 2;

    // the table/index name of this storage.
    string element_name = 3;
}

// external identity of tables and indices.
message StorageReference {
    // the name to identify storage
    StorageName name = 1;
}

// -- sequences

// external identity of sequences.
message SequenceReference {
    // the sequence name
    StorageName name = 1;
}

// definition of sequences.
message SequenceDefinition {

    // the definition information.
    oneof definition_id_optional {
        // the definition ID of this sequence.
        uint64 definition_id = 1;
    }

    // the optional sequence name.
    oneof name_optional {
        // the sequence name.
        StorageName name = 10;
    }

    // the initial value.
    int64 initial_value = 20;

    // the increment value.
    int64 increment_value = 21;

    // the minimum value.
    int64 min_value = 22;

    // the maximum value.
    int64 max_value = 23;

    // whether to allow value overflow.
    bool cycle = 24;

    // optional description
    string description = 40;
}

// -- functions

// external identity of functions.
message FunctionReference {
    // the function definition id
    uint64 definition_id = 10;
}

// -- tables

// feature of individual table columns. (see yugawara::storage::column)
enum TableColumnFeature {
    // unspecified.
    COLUMN_FEATURE_UNSPECIFIED = 0;

    // synthesized.
    SYNTHESIZED = 1;

    // hidden.
    HIDDEN = 2;

    // read-only.
    READ_ONLY = 3;
}

// the table column definition.
message TableColumn {

    // the column name.
    string name = 1;

    // the data type.
    common.TypeInfo type = 2;

    // the column nullity.
    bool nullable = 3;

    // the column default value.
    oneof default_value {
        // boolean type.
        bool boolean_value = 11;

        // 32-bit signed integer.
        sint32 int4_value = 14;

        // 64-bit signed integer.
        sint64 int8_value = 15;

        // 32-bit floating point number.
        float float4_value = 16;

        // 64-bit floating point number.
        double float8_value = 17;

        // multi precision decimal number.
        common.Decimal decimal_value = 18;

        // character sequence.
        string character_value = 19;

        // octet sequence.
        bytes octet_value = 21;

        // bit sequence.
        common.Bit bit_value = 23;

        // date (number of days offset of epoch 1970-01-01).
        sint64 date_value = 25;

        // time of day (nano-seconds since 00:00:00).
        uint64 time_of_day_value = 26;

        // time point.
        common.TimePoint time_point_value = 27;

        // date-time interval.
        common.DateTimeInterval datetime_interval_value = 28;

        // time of day with time zone.
        common.TimeOfDayWithTimeZone time_of_day_with_time_zone_value = 29;

        // time point with time zone.
        common.TimePointWithTimeZone time_point_with_time_zone_value = 30;

        // the next value of externally defined sequences.
        SequenceReference sequence_next = 40;

        // the next value of internally defined sequences.
        SequenceDefinition identity_next = 41;

        // the reference of externally defined generator function.
        FunctionReference generator = 50;
    }

    // the table column features.
    repeated TableColumnFeature column_features = 100;

    // optional description
    string description = 120;
}

// kind of actions to be performed on the table.
enum TableActionKind {

    // action type is not specified.
    UNSPECIFIED = 0;

    // reserved for OWNER
    reserved 1;

    // any control of the table.
    CONTROL = 2;

    // reserved for DESCRIBE
    reserved 3;

    // action to read entries from the table (`SELECT`).
    SELECT = 4;

    // action to create entries into the table (`INSERT` and `INSERT OR REPLACE`).
    INSERT = 5;

    // action to update entries in the table (`UPDATE`).
    UPDATE = 6;

    // action to delete entries from the table (`DELETE`).
    DELETE = 7;

    // reserved for CREATE, DROP
    reserved 8, 9;

    // reserved for ALTER, TRUNCATE
    reserved 10, 11;
}

// represents a privilege of an action for the table.
message TablePrivilegeAction {

    // the action kind of this privilege.
    TableActionKind action_kind = 1;

    // NOTE: extension point for column-level privileges..
}

// represents a table authorization of the grantee.
message TableAuthorizationEntry {

    // the authorization identifier for the table.
    string identifier = 1;

    // the permitted action list for the table, should not be empty.
    repeated TablePrivilegeAction privilege_list = 2;
}

// the definition of tables.
message TableDefinition {

    // the definition information.
    oneof definition_id_optional {
        // the definition ID of this table.
        uint64 definition_id = 10;
    }

    // the table name.
    StorageName name = 20;

    // the table columns.
    repeated TableColumn columns = 21;

    // optional description
    string description = 30;

    // the permitted action for all users, may be empty.
    repeated TablePrivilegeAction default_privilege_list = 50;

    // authorization for individual grantees.
    repeated TableAuthorizationEntry authorization_list = 60;

    // TODO: constraints.
}

// the sort kind.
enum Direction {

    // the sort kind is not defined.
    DIRECTION_UNSPECIFIED = 0;

    // ascendant order.
    ASCEND = 1;

    // descendant order.
    DESCEND = 2;
}

// index key columns.
message IndexColumn {

    // the column name.
    string name = 1;

    // the column sort direction.
    Direction direction = 2;

    // TODO NULLS FIRST/LAST
}

// feature of individual indices. (see yugawara::storage::index_feature)
enum IndexFeature {

    // unspecified.
    INDEX_FEATURE_UNSPECIFIED = 0;

    // primary index.
    PRIMARY = 1;

    // capable for find.
    FIND = 2;

    // capable for 1-dimensional key range scan.
    SCAN = 3;

    // key distinguishes individual entry
    UNIQUE = 4;

    // key distinguishes individual entry in the sense of constraint
    UNIQUE_CONSTRAINT = 5;
}

// the definition of indices.
message IndexDefinition {

    // the definition information.
    oneof definition_id_optional {
        // the definition ID of this index.
        uint64 definition_id = 10;
    }

    // the optional index name.
    oneof name_optional {
        // the index name.
        StorageName name = 20;
    }

    // the corresponding table information.
    oneof table {

        // the table definition (only for primary index).
        TableDefinition table_definition = 30;

        // owner table reference (for secondary indices).
        StorageReference table_reference = 31;
    }

    // Whether the index definition is synthesized and primary ownership is managed externally.
    // This is used to distinguish definitions made by CREATE DDLs from the one given by direct APIs.
    bool synthesized = 35;

    // the index keys.
    repeated IndexColumn keys = 40;

    // the names of value columns.
    repeated string values = 41;

    // the index features.
    repeated IndexFeature index_features = 42;

    // optional description
    string description = 50;
}

/* For text-based table definition (deprecated). */
message TexualDefinition {
    string ddl_statement = 1;
}

/* For table metadata. */
message Storage {
    // the storage metadata message version.
    uint64 message_version = 1;

    // the storage definition.
    oneof definition {
        // SQL DDL statement
        TexualDefinition statement = 10;

        // Index definition
        IndexDefinition index = 11;
    }
}

